import { createActor } from "./declarations/ic_cose_canister/index.js"
import { Ed25519KeyIdentity } from '@dfinity/identity'
import { createAgent } from '@dfinity/utils'
import assert from 'assert'
import { EncryptedVetKey, DerivedPublicKey, TransportSecretKey, IbeCiphertext, IbeIdentity, IbeSeed } from '@dfinity/vetkeys'
import { randomBytes } from 'node:crypto'

const IS_LOCAL = true
const apiHost = IS_LOCAL ? 'http://127.0.0.1:4943' : 'https://icp-api.io'
const canisterId = "53cyg-yyaaa-aaaap-ahpua-cai"
// The principal is generated by generateIdentity()
// 'pxfqr-x3orr-z5yip-7yzdd-hyxgd-dktgh-3awsk-ohzma-lfjzi-753j7-tae'
// add the principal to the COSE namespace
// dfx canister call ic_cose_canister namespace_add_users "(\"_\", vec {principal \"pxfqr-x3orr-z5yip-7yzdd-hyxgd-dktgh-3awsk-ohzma-lfjzi-753j7-tae\"})"

const idJSON =
  '["302a300506032b6570032100f6f7b1317cca7be2c3f6049da6932aadbd5549d4fd7d7d29290dead0b85d1f96","5b3770cbfd16d3ac610cc3cda0bc292a448f2c78d6634de6ee280df0a65e4c04"]'

async function main() {
  const identity = Ed25519KeyIdentity.fromJSON(idJSON)
  const agent = await createAgent({
    identity,
    fetchRootKey: IS_LOCAL,
    host: apiHost,
    verifyQuerySignatures: false
  })
  const actor = createActor(canisterId, {
    agent,
  })

  let keyId = new Uint8Array([0, 1, 2, 3])
  const myPath = {
    'ns': '_',
    'key': keyId,
    'subject': [],
    'version': 1,
    'user_owned': true,
  }

  const pubkey = await actor.vetkd_public_key(myPath)
  assert.equal(pubkey.Err, null)
  console.log("Public Key:", Buffer.from(pubkey.Ok).toString('hex'))

  const transportKey = TransportSecretKey.random()
  const encryptedKey = await actor.vetkd_encrypted_key(myPath, transportKey.publicKeyBytes())
  assert.equal(encryptedKey.Err, null)
  console.log("Encrypted Key:", Buffer.from(encryptedKey.Ok).toString('hex'))

  const dpk = DerivedPublicKey.deserialize(pubkey.Ok)
  const vk = new EncryptedVetKey(encryptedKey.Ok).decryptAndVerify(
    transportKey,
    dpk,
    keyId,
  )
  console.log("VetKey:", Buffer.from(vk.signatureBytes()).toString('hex'))

  // IBE (Identity Based Encryption)
  const seed = IbeSeed.fromBytes(Uint8Array.prototype.slice.call(randomBytes(32)))
  const id = IbeIdentity.fromBytes(keyId)
  const msg = Buffer.from("Hello, LDC Labs!")

  // Encrypt the message using the derived public key (dpk) and the identity (id)
  const cipherObj = IbeCiphertext.encrypt(dpk, id, Uint8Array.prototype.slice.call(msg), seed)
  const data = cipherObj.serialize()
  console.log("Ciphertext:", Buffer.from(data).toString('hex'))

  // Decrypt the message using the vetkey (vk)
  const cipherObj2 = IbeCiphertext.deserialize(data)
  const decryptedMsg = cipherObj2.decrypt(vk)
  console.log("Decrypted Message:", Buffer.from(decryptedMsg).toString())
  assert.equal(Buffer.from(decryptedMsg).toString(), "Hello, LDC Labs!")
}

main().catch((err) => {
  console.error("Error in main:", err)
  process.exit(1)
})